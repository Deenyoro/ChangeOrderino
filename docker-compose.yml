services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  db:
    image: postgres:18-alpine
    container_name: changeorderino-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_DB},${POSTGRES_KEYCLOAK_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/00-init-multiple-databases.sh
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==========================================
  # Redis Cache & Queue
  # ==========================================
  redis:
    image: redis:8-alpine
    container_name: changeorderino-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # MinIO Object Storage
  # ==========================================
  minio:
    image: minio/minio:latest
    container_name: changeorderino-minio
    restart: unless-stopped
    command: server /data --console-address ":9090"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # FastAPI Backend
  # ==========================================
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-unknown}
    container_name: changeorderino-api
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_SECURE: ${MINIO_SECURE}
      AUTH_ENABLED: ${AUTH_ENABLED}
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL}
      KEYCLOAK_REALM_URL: ${KEYCLOAK_REALM_URL}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      SMTP_ENABLED: ${SMTP_ENABLED}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USE_TLS: ${SMTP_USE_TLS}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      CORS_ORIGINS: ${CORS_ORIGINS}
      ENVIRONMENT: ${ENVIRONMENT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ==========================================
  # Email Service (Background Worker)
  # ==========================================
  email-service:
    build:
      context: ./services/email-service
      dockerfile: Dockerfile
    container_name: changeorderino-email-service
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      SMTP_ENABLED: ${SMTP_ENABLED}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USE_TLS: ${SMTP_USE_TLS}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      REMINDER_ENABLED: ${REMINDER_ENABLED}
      REMINDER_INTERVAL_DAYS: ${REMINDER_INTERVAL_DAYS}
      REMINDER_MAX_RETRIES: ${REMINDER_MAX_RETRIES}
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - backend

  # ==========================================
  # React Frontend + Nginx
  # ==========================================
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-unknown}
        VITE_API_URL: ${VITE_API_URL}
        VITE_AUTH_ENABLED: ${VITE_AUTH_ENABLED}
        VITE_KEYCLOAK_URL: ${VITE_KEYCLOAK_URL}
        VITE_KEYCLOAK_REALM: ${VITE_KEYCLOAK_REALM}
        VITE_KEYCLOAK_CLIENT_ID: ${VITE_KEYCLOAK_CLIENT_ID}
    container_name: changeorderino-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
      - "3443:443"
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_AUTH_ENABLED: ${VITE_AUTH_ENABLED}
      VITE_KEYCLOAK_URL: ${VITE_KEYCLOAK_URL}
      VITE_KEYCLOAK_REALM: ${VITE_KEYCLOAK_REALM}
      VITE_KEYCLOAK_CLIENT_ID: ${VITE_KEYCLOAK_CLIENT_ID}
    depends_on:
      - api
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # Keycloak Authentication
  # ==========================================
  keycloak:
    image: quay.io/keycloak/keycloak:26.4
    container_name: changeorderino-keycloak
    restart: unless-stopped
    profiles:
      - auth
    command: start
    environment:
      # Database Configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/${POSTGRES_KEYCLOAK_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}

      # Admin Credentials
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      # Hostname Configuration - Works with Cloudflare Tunnel
      # Keycloak 26.x v2 hostname configuration
      KC_PROXY_HEADERS: "xforwarded"  # Trust X-Forwarded-* headers from proxy
      KC_HOSTNAME: ${VITE_KEYCLOAK_URL}  # Public hostname (e.g., https://auth.yourdomain.com or https://localhost:8443)
      KC_HOSTNAME_ADMIN: ${VITE_KEYCLOAK_URL}  # Admin URL
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_PORT: "8080"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"

      # Cookie settings for working behind proxy
      KC_SPI_LOGIN_PROTOCOL_OPENID_CONNECT_LEGACY_LOGOUT_REDIRECT_URI: "true"
      KC_SPI_COOKIE_DEFAULT_SAME_SITE: "None"
      KC_SPI_COOKIE_DEFAULT_SECURE: "true"

      # Performance
      KC_CACHE: ispn
      KC_CACHE_STACK: tcp

      # Logging
      KC_LOG_LEVEL: INFO

      # Features
      KC_FEATURES: token-exchange,admin-fine-grained-authz
    volumes:
      - keycloak-data:/opt/keycloak/data
      - ./certs:/opt/keycloak/certs:ro
      - ./keycloak-theme/changeorderino:/opt/keycloak/themes/changeorderino:ro
    networks:
      - backend
      - public
    depends_on:
      db:
        condition: service_healthy

  # ==========================================
  # Cloudflare Tunnel (Optional)
  # ==========================================
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: changeorderino-cloudflared
    restart: unless-stopped
    profiles:
      - auth
    command: tunnel --no-autoupdate run
    environment:
      TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

networks:
  backend:
    driver: bridge
  public:
    driver: bridge

volumes:
  db-data:
  redis-data:
  minio-data:
  keycloak-data:
